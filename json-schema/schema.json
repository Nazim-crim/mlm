{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://stac-extensions.github.io/mlm/v1.0.0/schema.json",
  "title": "DL Model Item",
  "description": "This object represents the metadata for a Machine Learning Model (MLM).",
  "oneOf": [
    {
      "$comment": "This is the schema for STAC extension MLM in Items.",
      "allOf": [
        {
          "type": "object",
          "required": [
            "type",
            "properties",
            "assets"
          ],
          "properties": {
            "type": {
              "const": "Feature"
            },
            "properties": {
              "allOf": [
                {
                  "required": [
                    "mlm:name",
                    "mlm:architecture",
                    "mlm:framework",
                    "mlm:tasks",
                    "mlm:input",
                    "mlm:output"
                  ]
                },
                {
                  "$ref": "#/$defs/fields"
                }
              ]
            },
            "assets": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/$defs/fields"
              }
            }
          }
        },
        {
          "$ref": "#/$defs/stac_extensions_mlm"
        }
      ]
    },
    {
      "$comment": "This is the schema for STAC extension MLM in Collections.",
      "allOf": [
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "const": "Collection"
            },
            "summaries": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/$defs/fields"
              }
            },
            "assets": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/$defs/fields"
              }
            }
          }
        },
        {
          "$ref": "#/$defs/stac_extensions_mlm"
        }
      ]
    }
  ],
  "$defs": {
    "stac_extensions_mlm": {
      "type": "object",
      "required": [
        "stac_extensions"
      ],
      "properties": {
        "stac_extensions": {
          "type": "array",
          "contains": {
            "const": "https://stac-extensions.github.io/mlm/v1.0.0/schema.json"
          }
        }
      }
    },
    "stac_extensions_eo": {
      "type": "object",
      "required": [
        "stac_extensions"
      ],
      "properties": {
        "stac_extensions": {
          "type": "array",
          "contains": {
            "type": "string",
            "pattern": "https://stac-extensions\\.github\\.io/eo/v1(\\.[0-9]+){2}/schema\\.json"
          }
        }
      }
    },
    "stac_extensions_raster": {
      "type": "object",
      "required": [
        "stac_extensions"
      ],
      "properties": {
        "stac_extensions": {
          "type": "array",
          "contains": {
            "type": "string",
            "pattern": "https://stac-extensions\\.github\\.io/raster/v1(\\.[0-9]+){2}/schema\\.json"
          }
        }
      }
    },
    "stac_version_1.1": {
      "$comment": "Requirement for STAC 1.1 or above.",
      "type": "object",
      "required": [
        "stac_version"
      ],
      "properties": {
        "stac_version": {
          "pattern": "1\\.[1-9][0-9]*\\.[0-9]+(-.*)?"
        }
      }
    },
    "fields": {
      "type": "object",
      "properties": {
        "mlm:name": {
          "$ref": "#/$defs/mlm:name"
        },
        "mlm:architecture": {
          "$ref": "#/$defs/mlm:architecture"
        },
        "mlm:tasks": {
          "$ref": "#/$defs/mlm:tasks"
        },
        "mlm:framework": {
          "$ref": "#/$defs/mlm:framework"
        },
        "mlm:framework_version": {
          "$ref": "#/$defs/mlm:framework_version"
        },
        "mlm:memory_size": {
          "$ref": "#/$defs/mlm:memory_size"
        },
        "mlm:total_parameters": {
          "$ref": "#/$defs/mlm:total_parameters"
        },
        "mlm:pretrained_source": {
          "$ref": "#/$defs/mlm:pretrained_source"
        },
        "mlm:batch_size_suggestion": {
          "$ref": "#/$defs/mlm:batch_size_suggestion"
        },
        "mlm:accelerator": {
          "$ref": "#/$defs/mlm:accelerator"
        },
        "mlm:accelerator_constrained": {
          "$ref": "#/$defs/mlm:accelerator_constrained"
        },
        "mlm:accelerator_summary": {
          "$ref": "#/$defs/mlm:accelerator_summary"
        },
        "mlm:accelerator_count": {
          "$ref": "#/$defs/mlm:accelerator_count"
        },
        "mlm:input": {
          "$ref": "#/$defs/mlm:input"
        },
        "mlm:output": {
          "$ref": "#/$defs/mlm:output"
        }
      },
      "$comment": "Allow properties not defined by MLM prefix to allow combination with other extensions.",
      "patternProperties": {
        "^(?!dlm:)": {}
      },
      "additionalProperties": false
    },
    "mlm:name": {
      "type": "string",
      "pattern": "^[a-zA-Z][a-zA-Z0-9_.-]+[a-zA-Z0-9]$"
    },
    "mlm:architecture": {
      "type": "string",
      "title": "Model Architecture",
      "description": "A descriptive name of the model architecture, typically a common name from the literature.",
      "examples": [
        "ResNet",
        "VGG",
        "GAN",
        "Vision Transformer"
      ]
    },
    "mlm:framework": {
      "title": "Name of the machine learning framework used.",
      "anyOf": [
        {
          "$comment": "Add more entries here as needed, and repeat them in the README.",
          "description": "Notable predefined framework names.",
          "type": "string",
          "enum": [
            "PyTorch",
            "TensorFlow",
            "Scikit-learn",
            "Huggingface",
            "PyMC",
            "JAX",
            "ONNX",
            "MXNet",
            "Keras",
            "Caffe",
            "Weka"
          ]
        },
        {
          "type": "string",
          "minLength": 1,
          "description": "Any other framework name to allow extension. Enum names should be preferred when possible to allow better portability."
        }
      ]
    },
    "mlm:framework_version": {
      "title": "Framework version",
      "type": "string",
      "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
    },
    "mlm:tasks": {
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "regression",
          "classification",
          "scene-classification",
          "detection",
          "object-detection",
          "segmentation",
          "semantic-segmentation",
          "instance-segmentation",
          "panoptic-segmentation",
          "similarity-search",
          "generative",
          "image-captioning",
          "super-resolution"
        ]
      }
    },
    "mlm:memory_size": {
      "description": "Memory size (in bytes) required to load the model with the specified accelerator.",
      "type": "integer",
      "minimum": 0
    },
    "mlm:total_parameters": {
      "description": "Total number of model parameters (weights).",
      "type": "integer",
      "minimum": 0
    },
    "mlm:pretrained_source": {
      "description": "Pre-training dataset reference or training from scratch definition.",
      "oneOf": [
        {
          "type": "string",
          "description": "The name or URI of the dataset used for pretraining the model.",
          "examples": [
            "ImageNet",
            "EuroSAT"
          ]
        },
        {
          "type": "null",
          "description": "Explicit mention that the model is trained from scratch."
        }
      ]
    },
    "mlm:batch_size_suggestion": {
      "description": "Recommended batch size to employ the model with the accelerator.",
      "type": "integer",
      "minimum": 0
    },
    "mlm:accelerator": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "amd64",
            "cuda",
            "xla",
            "amd-rocm",
            "intel-ipex-cpu",
            "intel-ipex-gpu",
            "macos-arm"
          ]
        },
        {
          "type": "null"
        }
      ],
      "default": null
    },
    "mlm:accelerator_constrained": {
      "type": "boolean",
      "default": false
    },
    "mlm:accelerator_summary": {
      "type": "string"
    },
    "mlm:accelerator_count": {
      "type": "integer",
      "minimum": 1
    },
    "mlm:input": {
      "type": "array",
      "items": {
        "title": "Model Input Object",
        "type": "object",
        "required": [
          "name",
          "bands",
          "input"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "bands": {
            "$ref": "#/$defs/ModelBands"
          },
          "input": {
            "$ref": "#/$defs/InputStructure"
          },
          "norm_by_channel": {
            "type": "boolean"
          },
          "norm_type": {
            "$ref": "#/$defs/NormalizeType"
          },
          "norm_clip": {
            "$ref": "#/$defs/NormalizeClip"
          },
          "resize_type": {
            "$ref": "#/$defs/ResizeType"
          },
          "statistics": {
            "$ref": "#/$defs/statistics"
          },
          "pre_processing_function": {
            "$ref": "https://stac-extensions.github.io/processing/v1.1.0/schema.json#/definitions/fields/properties/processing:expression"
          }
        }
      }
    },
    "InputStructure": {
      "title": "Input Structure Object",
      "type": "object",
      "required": [
        "shape",
        "dim_order",
        "data_type"
      ],
      "properties": {
        "shape": {
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": -1
          }
        },
        "dim_order": {
          "type": "string",
          "minLength": 1
        },
        "data_type": {
          "$ref": "#/$defs/DataType"
        }
      }
    },
    "NormalizeType": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "min-max",
            "z-score",
            "l1",
            "l2",
            "l2sqr",
            "hamming",
            "hamming2",
            "type-mask",
            "relative",
            "inf"
          ]
        },
        {
          "type": "null"
        }
      ]
    },
    "NormalizeClip": {

    },
    "ResizeType": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "crop",
            "pad",
            "interpolation-nearest",
            "interpolation-linear",
            "interpolation-cubic",
            "interpolation-area",
            "interpolation-lanczos4",
            "interpolation-max",
            "wrap-fill-outliers",
            "wrap-inverse-map"
          ]
        },
        {
          "type": "null"
        }
      ]
    },
    "DataType": {
      "$ref": "https://stac-extensions.github.io/raster/v1.1.0/schema.json#/definitions/bands/items/properties/data_type"
    },
    "ModelBands": {
      "allOf": [
        {
          "$comment": "No 'minItems' here since to support model inputs not using any band (other data source).",
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "$comment": "However, if any band is indicated, a 'bands'-compliant section should describe them.",
          "$ref": "#/$defs/AnyBandsRef"
        }
      ]
    },
    "AnyBandsRef": {
      "$comment": "This definition ensures that, if at least 1 named MLM 'bands' is provided, at least 1 of the supported references from EO, Raster or STAC Core 1.1 are provided as well.",
      "if": {
        "$comment": "This is the JSON-object 'properties' definition.",
        "properties": {
          "$comment": "This is the STAC-Item 'properties' field.",
          "properties": {
            "required": [
              "mlm:input"
            ],
            "$comment": "This is the JSON-object 'properties' definition for the STAC Item 'properties' field.",
            "properties": {
              "$comment": "Required MLM bands listing referring to at least one band name.",
              "mlm:input": {
                "type": "array",
                "items": {
                  "required": [
                    "bands"
                  ],
                  "$comment": "This is the 'Model Input Object' properties.",
                  "properties": {
                    "bands": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "$comment": "This 'minItems' is the purpose of this whole 'if/then' block.",
                        "minItems": 1
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "then": {
        "$comment": "Need at least one 'bands', but multiple is allowed.",
        "anyOf": [
          {
            "allOf": [
              {
                "$ref": "#/$defs/stac_extensions_raster"
              },
              {
                "$comment": "This is the JSON-object 'properties' definition.",
                "properties": {
                  "$comment": "This is the STAC-Item 'properties' field.",
                  "properties": {
                    "required": ["raster:bands"],
                    "$comment": "This is the JSON-object 'properties' definition for the STAC Item 'properties' field.",
                    "properties": {
                      "$comment": "https://github.com/stac-extensions/raster#item-asset-fields",
                      "raster:bands": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/$defs/stac_extensions_eo"
              },
              {
                "$comment": "This is the JSON-object 'properties' definition.",
                "properties": {
                  "$comment": "This is the STAC-Item 'properties' field.",
                  "properties": {
                    "required": ["eo:bands"],
                    "$comment": "This is the JSON-object 'properties' definition for the STAC Item 'properties' field.",
                    "properties": {
                      "$comment": "https://github.com/stac-extensions/eo#item-properties-or-asset-fields",
                      "eo:bands": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/$defs/stac_version_1.1"
              },
              {
                "$comment": "This is the JSON-object 'properties' definition.",
                "properties": {
                  "$comment": "This is the STAC-Item 'properties' field.",
                  "properties": {
                    "required": ["bands"],
                    "$comment": "This is the JSON-object 'properties' definition for the STAC Item 'properties' field.",
                    "properties": {
                      "$comment": "https://github.com/radiantearth/stac-spec/blob/bands/item-spec/common-metadata.md#bands",
                      "bands": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        ]
      }
    },

    "dlm:runtime": {
      "title": "Execution environment",
      "description": "Describe the execution environment",
      "type": "object",
      "required": [
        "framework",
        "version",
        "model_handler",
        "model_src_url",
        "requirement_file"
      ],
      "properties": {

        "docker": {
          "title": "Docker runtime specifications",
          "type": "object",
          "anyOf": [
            {
              "required": [
                "docker_file",
                "gpu",
                "working_dir",
                "run"
              ]
            },
            {
              "required": [
                "image_name",
                "gpu",
                "working_dir",
                "run"
              ]
            }
          ],
          "properties": {
            "docker_runtime": {
              "anyOf": [
                {
                  "docker_file": {
                    "title": "Docker file url",
                    "type": "string"
                  },
                  "docker_image": {
                    "title": "Docker image url",
                    "type": "string"
                  }
                }
              ]
            },
            "gpu": {
              "title": "Docker runtime requires a gpu",
              "type": "boolean"
            },
            "image_name": {
              "title": "Docker image name",
              "type": "string"
            },
            "tag": {
              "title": "Docker image tag",
              "type": "string"
            },
            "working_dir": {
              "title": "Docker container working dir",
              "type": "string"
            },
            "run": {
              "title": "Docker run parameters",
              "type": "string"
            }
          }
        }
      }
    },
    "dlm:architecture": {
      "title": "Model architecture description",
      "description": "Describe the model architecture",
      "type": "object",
      "required": [
        "total_nb_parameters",
        "estimated_total_size_mb",
        "type",
        "pretrained"
      ],
      "properties": {
        "total_nb_parameters": {
          "title": "Total number of parameters",
          "type": "integer"
        },
        "estimated_total_size_mb": {
          "title": "Estimated memory size in MB",
          "type": "number"
        },
        "type": {
          "title": "Type of architecture",
          "type": "string"
        },
        "summary": {
          "title": "Summary of the architecture",
          "type": "string",
          "examples": [
            {
              "$ref": "https://raw.githubusercontent.com/crim-ca/dlm-extension/main/examples/model-arch-summary.txt"
            }
          ]
        },
        "pretrained": {
          "title": "Pre-training",
          "type": "string"
        }
      }
    },
    "dlm:inputs": {
      "title": "Description of the input tensor",
      "type": "object",
      "description": "Describe the inputs required by the model",
      "required": [
        "name",
        "scaling_factor",
        "normalization:mean",
        "normalization:std",
        "selected_bands",
        "input_tensors"
      ],
      "properties": {
        "name": {
          "title": "Python name of the tensor",
          "type": "string"
        },
        "scaling_factor": {
          "title": "Scaling factor",
          "description": "Scaling factor to be applied on the data in order to bring the range of values between 0 and 1",
          "type": "number",
          "exclusiveMinimum": 0
        },
        "normalization:mean": {
          "title": "Statistical mean",
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "number"
          }
        },
        "normalization:std": {
          "title": "Statistical standard-deviation",
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "number",
            "exclusiveMinimum": 0
          }
        },
        "selected_bands": {
          "title": "Selected bands",
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "integer"
          }
        },
        "pre_processing_function": {
          "title": "Pre-processing function",
          "description": "Pre-processing Python function transforming the EO data to a ML-ready tensor",
          "type": "string"
        },
        "input_tensors": {
          "title": "Shape of the input tensor",
          "description": "Describe the dimensions of the input tensors",
          "type": "array",
          "minItems": 1,
          "items": {
            "properties": {
              "batch": {
                "title": "Batch size",
                "type": "integer",
                "minimum": 1
              },
              "dim": {
                "title": "Number of channels",
                "type": "integer",
                "minimum": 1
              },
              "height": {
                "title": "Height",
                "type": "integer",
                "minimum": 1
              },
              "width": {
                "title": "Width",
                "type": "integer",
                "minimum": 1
              }
            }
          }
        }
      }
    },
    "dlm:outputs": {
      "title": "Description of the outputs of the model",
      "type": "object",
      "description": "Describe the outputs of the model",
      "required": [
        "task",
        "number_of_classes",
        "final_layer_size",
        "class_name_mapping"
      ],
      "properties": {
        "task": {
          "title": "Task name",
          "type": "string",
          "enum": [
            "semantic segmentation",
            "classification",
            "object detection",
            "object segmentation"
          ]
        },
        "number_of_classes": {
          "title": "number of classes",
          "type": "integer",
          "minimum": 1
        },
        "final_layer_size": {
          "title": "Output size",
          "description": "Size of the tensor from the top layer",
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "integer",
            "exclusiveMinimum": 0
          }
        },
        "dont_care_index": {
          "title": "Index of 'dont-care' class",
          "description": "In case a 'dont-care' class is used",
          "type": "integer"
        },
        "post_processing_function": {
          "title": "Name of the post-processing file",
          "description": "Name of the python file containing a post-processing function",
          "type": "string"
        },
        "class_name_mapping": {
          "description": "This is a lookup table mapping the model output (index) to a class name",
          "oneOf": [
            {
              "$ref": "#/$defs/dlm:class_name_listing"
            },
            {
              "$ref": "#/$defs/dlm:class_name_mapping"
            }
          ]
        }
      }
    },
    "dlm:class_name_listing": {
      "deprecated": true,
      "type": "array",
      "minItems": 1,
      "items": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "index": {
                "title": "Class index",
                "type": "integer",
                "minimum": 0
              },
              "class_name": {
                "title": "Class name",
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/$defs/dlm:class_name_mapping"
          }
        ]
      }
    },
    "dlm:class_name_mapping": {
      "type": "object",
      "patternProperties": {
        "^I_": {
          "description": "Class name to map the index.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "dlm:data": {
      "title": "Description of the data requirements",
      "type": "object",
      "description": "Describe the eo data compatible with the model",
      "required": [
        "process_level",
        "data_type",
        "number_of_bands",
        "class_name_mapping"
      ],
      "properties": {
        "process_ level": {
          "title": "Data processing level",
          "description": "Describe the processing level expected",
          "type": "string",
          "enum": [
            "raw",
            "ortho",
            "L0",
            "L1",
            "L2",
            "L3"
          ]
        },
        "nodata": {
          "title": "no data value",
          "description": "Sometimes datasets have no data value, this value should be ignored",
          "type": "number"
        },
        "item_examples": {
          "title": "item examples",
          "description": "Link to additional data records or stac items",
          "type": "array",
          "minItems": 1,
          "items": {
            "properties": {
              "url": {
                "title": "Link toward an item",
                "type": "string"
              },
              "title": {
                "title": "item description",
                "type": "string"
              }
            }
          }
        },
        "number_of_bands": {
          "title": "number of bands",
          "description": "Number of spectral bands expected in the eo data",
          "type": "number",
          "minimum": 1
        },
        "useful_bands": {
          "title": "Useful bands",
          "description": "Describe the spectral bands required by the model",
          "type": "array",
          "minItems": 1,
          "items": {
            "properties": {
              "index": {
                "title": "Index of the spectral band",
                "description": "Index of the band in the original dataset",
                "type": "integer",
                "minimum": 0
              },
              "name": {
                "title": "Short name of the band",
                "type": "string"
              }
            }
          }
        },
        "data_type": {
          "title": "Data type",
          "description": "Data type according to numpy",
          "type": "string",
          "enum": [
            "byte",
            "short",
            "intc",
            "int_",
            "longlong",
            "int8",
            "int16",
            "int32",
            "int64",
            "ubyte",
            "ushort",
            "uintc",
            "uint",
            "ulonglong",
            "uint8",
            "uint16",
            "uint32",
            "uint64",
            "half",
            "double",
            "float_",
            "longfloat",
            "float16",
            "float32",
            "float64",
            "float96",
            "float128"
          ]
        },
        "test_file": {
          "title": "Test file",
          "type": "string",
          "description": "this test file is a data sample"
        }
      }
    },
    "dlm:archive": {
      "title": "Description of the archive content",
      "description": "Describe the model archive content",
      "type": "array",
      "minItems": 1,
      "items": {
        "properties": {
          "name": {
            "title": "File name",
            "type": "string"
          },
          "role": {
            "title": "Role of the file",
            "type": "string",
            "enum": [
              "dependency",
              "handling function",
              "model weight",
              "config file",
              "test set",
              "other"
            ]
          }
        }
      }
    }
  }
}
